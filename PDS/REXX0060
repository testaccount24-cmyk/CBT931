/* REXX REXX0060 TO DUPLICATE FUNCTIONALITY OF CLIST PROC */
TO TEST:

REXX0060 JOE 22-ELM-ST 4343434
REXX0060 JOE 22-ELM-ST 4343434 STATE(CT)
REXX0060 JOE 22-ELM-ST 4343434 CALENDAR(JULIAN)

*/
DEBUG = "NO "                    /* YES OR NO */
SHOW_RESOLVED_VARIABLES = "YES"  /* SHOW ALL VARIABLES/PARMS SET */
ARG CMD_LINE_ENTERED    /* PICK UP WHAT'S ON COMMAND LINE */
NUM_POS_PARMS = 3       /* COUNT THE FOLLOWING   */
POS_PARM.1    = "NAME"  /* CHANGE FOR YOUR NEEDS */
POS_PARM.2    = "ADDR"  /* CHANGE FOR YOUR NEEDS */
POS_PARM.3    = "PHONE" /* CHANGE FOR YOUR NEEDS */
POS_PARM.0    = NUM_POS_PARMS

NUM_KEY_PARMS = 3                     /* COUNT THE FOLLOWING   */
KEY_PARM.1    = "STATE(NY)"           /* CHANGE FOR YOUR NEEDS */
KEY_PARM.2    = "WEEKDAY(MONDAY)"     /* CHANGE FOR YOUR NEEDS */
KEY_PARM.3    = "CALENDAR(GREGORIAN)" /* CHANGE FOR YOUR NEEDS */
KEY_PARM.0    = 3                     /* NUMBER OF KEYW PARMS  */

CALL UNSTRING_CMD_LINE_ENTERED
CALL PARM_WAS_ENTERED_OR_ASK
CALL VERIFY_INPUT
IF SHOW_RESOLVED_VARIABLES = "YES" THEN CALL DISPLAY_INPUT
CALL PROCESS_KEYWORDS
IF SHOW_RESOLVED_VARIABLES = "YES" THEN CALL DISPLAY_INPUT_KEYWORDS
EXIT /* LOGICAL END OF PROGRAM */

UNSTRING_CMD_LINE_ENTERED: /* PICS UP BOTH POSIT AND KEYWORD PARMS */
DO I = 1 TO WORDS(CMD_LINE_ENTERED)
   POS_ENTERED.I = WORD(CMD_LINE_ENTERED, I)
END I
IF DEBUG = "YES" THEN DO I = 1 TO WORDS(CMD_LINE_ENTERED)
   SAY POS_ENTERED.I I
END
RETURN

PARM_WAS_ENTERED_OR_ASK:
"CLS" /* CLEAR THE SCREEN. DELETE IF YOU DON'T HAVE THIS PROGRAM */
DO I = 1 TO NUM_POS_PARMS
  IF DEBUG = "YES" THEN SAY POS_ENTERED.I "IS THE ARG FOR " I
  IF DEBUG = "YES" THEN SAY SYMBOL("POS_ENTERED.I") "SYMBOL"
  /* "OR" CHARACTER, ON NEXT LINE, IS HEX 4F */
  IF POS_ENTERED.I = "" | SYMBOL("POS_ENTERED.I") = "LIT"
      THEN CALL GET_POS_PARM POS_PARM.I I
      ELSE INTERPRET POS_PARM.I " = POS_ENTERED.I"
END I
RETURN

GET_POS_PARM:
SAY "ENTER POSITIONAL PARAMETER" POS_PARM.I
PULL ENTRY
IF ENTRY = "" THEN SIGNAL NO_POS_PARM_ENTERED
INTERPRET POS_PARM.I "= ENTRY"
IF DEBUG = "YES" THEN SAY VALUE(POS_PARM.I)
RETURN

VERIFY_INPUT:
/* CHECK FOR "(" AMONG POSITIONALS */
DO J = 1 TO NUM_POS_PARMS
   TEMP = POS_ENTERED.J
   IF POS("(",TEMP) > 0 THEN DO
      SAY "POSITIONAL PARAMETER" POS_ENTERED.J "CONTAINS PAREN"
      SAY "ONLY KEYWORD PARAMETERS CAN CONTAIN PARENS. TERMINATING"
      EXIT
      END
END J

/* CHECK FOR TOO MANY PARAMETERS, IN ALL */
IF WORDS(CMD_LINE_ENTERED) > (NUM_POS_PARMS + NUM_KEY_PARMS)
   THEN DO
        SAY "TOO MANY PARAMETERS ENTERED ON COMMAND LINE"
        SAY "MAX IS " NUM_POS_PARMS "POSITIONAL "
        SAY "AND    " NUM_KEY_PARMS "KEYWORD. TERMINATING"
        EXIT
        END

/*  CHECK EVERY WORD ON CMD LINE CONTAINING "(" */
TEMP_CONCAT = ""
/* STRING ALL VALID KEYWORDS TOGETHER INTO ONE VARIABLE */
DO P2 = 1 TO NUM_KEY_PARMS
   TEMP_CONCAT = TEMP_CONCAT KEY_PARM.P2
END P2

DO P = 1 TO WORDS(CMD_LINE_ENTERED)

   TEMP = WORD(CMD_LINE_ENTERED, P)
   IF POS("(", TEMP) = 0 THEN ITERATE /* IGNORE IF NO ( */

   PARSE VAR TEMP TEMP "("    /* DROP "(" AND WHAT FOLLOWS */
   TEMP = TEMP"("             /* PUT BACK THE "(" */

   IF POS(TEMP, TEMP_CONCAT) = 0 THEN DO
      SAY "KEYWORD ENTERED " TEMP " IS NOT DEFINED"
      SAY "TERMINATING"
      EXIT
      END
END P

/* CHECK FOR BALANCED PARENS */
CTR_LEFT_PARENS  = 0
CTR_RIGHT_PARENS = 0
DO Q = 1 TO LENGTH(CMD_LINE_ENTERED)
   IF SUBSTR(CMD_LINE_ENTERED, Q, 1) = "("
      THEN CTR_LEFT_PARENS  = CTR_LEFT_PARENS + 1
   IF SUBSTR(CMD_LINE_ENTERED, Q, 1) = ")"
      THEN CTR_RIGHT_PARENS = CTR_RIGHT_PARENS + 1
END Q
IF CTR_LEFT_PARENS <> CTR_RIGHT_PARENS
THEN DO
     SAY "UNBALANCED PARENTHESES ON INPUT. TERMINATING"
     EXIT
     END

IF POS("((", CMD_LINE_ENTERED) > 0 THEN DO
     SAY "UNBALANCED PARENTHESES ON INPUT. TERMINATING"
     EXIT
     END

IF POS("))", CMD_LINE_ENTERED) > 0 THEN DO
     SAY "UNBALANCED PARENTHESES ON INPUT. TERMINATING"
     EXIT
     END

RETURN /* FOR VERIFY_INPUT */

DISPLAY_INPUT:
SAY "POSITIONAL PARAMETERS AS RESOLVED"
DO K = 1 TO NUM_POS_PARMS
   SAY POS_PARM.K VALUE(POS_PARM.K)
END K
RETURN

PROCESS_KEYWORDS:
DO M = 1 TO KEY_PARM.0
   PARSE UPPER VAR KEY_PARM.M KW "(" KW_VALUE ")"
   INTERPRET KW "= KW_VALUE"  /* SET DEFAULT VALUE */
   KW2   = SPACE(KW"(",0)     /* ADD PAREN, DROP SPACES, IF ANY */
   IF POS(KW2, CMD_LINE_ENTERED) > 0
      THEN DO
           PARSE UPPER VAR CMD_LINE_ENTERED (KW2) KW3 ")"
           INTERPRET   KW "= KW3"
           END
END M
RETURN

DISPLAY_INPUT_KEYWORDS:
SAY "KEYWORD    PARAMETERS AS RESOLVED"
DO N = 1 TO KEY_PARM.0
 /*SAY KEY_PARM.N    */
   PARSE UPPER VAR KEY_PARM.N KW "("
   INTERPRET "SAY KW "  KW
/*   SAY "THIS";SAY KW    VALUE(KW)  */
/* SAY        KEY_PARM.N VALUE(KEY_PARM.N)  */
END N
RETURN

NO_POS_PARM_ENTERED:
SAY "YOU DID NOT ENTER A REQUIRED POSITIONAL PARAMETER. TERMINATING"
EXIT

